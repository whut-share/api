# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  created_at: DateTime!
  updated_at: DateTime!
  id: ObjectId!
  email: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""A simple ObjectId scalar. (example: "62d13a8b029b95001b881441")"""
scalar ObjectId

type EventEmitterInstance {
  created_at: DateTime!
  updated_at: DateTime!
  id: String!
  name: String!
  is_webhook_emitter: Boolean!
  webhook_endpoint: String
  syncer_instance: ObjectId!
  is_stopped: Boolean!
}

type SyncerInstanceContract {
  created_at: DateTime!
  updated_at: DateTime!
  network: Network!
  address: Address!
  deploy_tx: Keccak256!
  contract_name: String!
  events: [String!]!
  abi: JSON!
}

"""
A network scalar. See https://developers.interactwith.com/docs/getting-started/supported-chains for the full list of supported networks. (example: "eth")
"""
scalar Network

"""
A simple Address parser (example: "0x509016ec41c0F4b3072cA7c000034845163ECA0E")
"""
scalar Address

"""
A keccak256 scalar. (example: "0xbbdf3616512df59a06f9c800ac8da843b3a0926340249b3910b18d7d64992124")
"""
scalar Keccak256

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type SyncerInstance {
  created_at: DateTime!
  updated_at: DateTime!
  id: ObjectId!
  contracts: [SyncerInstanceContract!]!
  project: ObjectId!
  preset: String!
}

type ProjectSyncerSettings {
  include_networks: [Network!]!
  contracts_base_url: String
}

type ProjectDassetsSettings {
  include_networks: [String!]!
  token_base_url: String
  webhook_events_url: String
}

type Project {
  created_at: DateTime!
  updated_at: DateTime!
  id: String!
  user: String!
  name: String!
  pic: String
  dassets_settings: ProjectDassetsSettings!
  syncer_settings: ProjectSyncerSettings!
  dassets_syncer_instance: SyncerInstance!
}

type DassetsNft {
  created_at: DateTime!
  updated_at: DateTime!
  project: ObjectId!
  owner: Address!
  mint_tx: Keccak256!
  mint_block: Int!
  network: Network!
  token_id: Int!
  asset_id: String!
  owner_synced_at: Int!
}

type SyncerEvent {
  created_at: DateTime!
  updated_at: DateTime!
  id: String!
  internal_id: String!
  name: String!
  payload: JSON
  args: JSON
  event_emitter_instance: ObjectId!
  metadata: JSON!
  is_processed: Boolean!
}

type DassetsNftAssetInfo {
  id: String!
  name: String!
  description: String
  image_url: String
}

type DassetsCheckoutSessionPriceEstimate {
  price: Float!
  total_eth: Float!
  eth_price: Float!
  gas_price: Float!
  gas: Float!
  slippage: Float!
}

type DassetsCheckoutSession {
  created_at: DateTime!
  updated_at: DateTime!
  id: String!
  project: String!
  address: Address
  mint_tx: Keccak256
  mint_token_id: Float
  mint_request_id: String
  payment_id: String
  payment_expires_at: DateTime
  network: Network
  contract_type: String!
  is_succeeded: Boolean!
  expires_at: DateTime!
  asset_info: DassetsNftAssetInfo!
  is_payed: Boolean!
  url: String!
  is_minted: Boolean!
  is_expired: Boolean!
  price_estimation: DassetsCheckoutSessionPriceEstimate
  stripe_pi_client_secret: String
}

type ProjectGroup {
  created_at: DateTime!
  updated_at: DateTime!
  id: String!
  user: ObjectId!
  name: String!
  pic: String
  projects: [ObjectId!]!
}

type KeyBunch {
  created_at: DateTime!
  updated_at: DateTime!
  id: String!
  user: String!
  project: String!
  name: String!
  description: String!
  public_key: String!
  secret_key: String
}

type Query {
  me: User!
  users: [User!]!
  dassets_nfts(filter: IDassetsNftsFilter): [DassetsNft!]!
  dassets_nft(id: ObjectId!): DassetsNft!
  syncer_events(filter: ISyncerEventsFilter!): [SyncerEvent!]!
  event_emitter_instances(filter: IEventEmitterInstancesFilter!): [EventEmitterInstance!]!
  event_emitter_instance(id: ObjectId!): EventEmitterInstance!
  syncer_instances(filter: ISyncerInstancesFilter!): [SyncerInstance!]!
  syncer_instance(id: ObjectId!): SyncerInstance!
  projects: [Project!]!
  project(id: ObjectId!): Project!
  project_groups: [ProjectGroup!]!
  project_group(id: ObjectId!): ProjectGroup!
  key_bunches: [KeyBunch!]!
  key_bunch(id: ObjectId!): KeyBunch!
  dassets_checkout_session(id: ObjectId!): DassetsCheckoutSession!
}

input IDassetsNftsFilter {
  network: Network
}

input ISyncerEventsFilter {
  event_emitter_instance: ObjectId
  is_processed: Boolean
}

input IEventEmitterInstancesFilter {
  syncer_instance: ObjectId
}

input ISyncerInstancesFilter {
  project: ObjectId!
}

type Mutation {
  userSignUp(data: IUserSignUp!): User!
  syncerEventsProcess(ids: ObjectId!): Void!
  eventEmitterInstanceUpdate(id: ObjectId!, data: IEventEmitterInstanceUpdate!): EventEmitterInstance!
  eventEmitterInstanceCreate(data: IEventEmitterInstanceCreate!): EventEmitterInstance!
  syncerInstanceCreate(data: ISyncerInstanceCreate!): SyncerInstance!
  syncerInstanceUpdate(id: ObjectId!, data: ISyncerInstanceUpdate!): SyncerInstance!
  syncerInstanceDelete(id: ObjectId!): Void!
  projectCreate(data: IProjectCreate!): Project!
  projectUpdate(id: ObjectId!, data: IProjectUpdate!): Project!
  projectGroupCreate(data: IProjectGroupCreate!): ProjectGroup!
  projectGroupUpdate(id: ObjectId!, data: IProjectGroupUpdate!): ProjectGroup!
  projectGroupDelete(id: ObjectId!): Void!
  keyBunchCreate(data: IKeyBunchCreate!): KeyBunch!
  dassetsCheckoutSessionCreate(data: IDassetsCheckoutSessionCreate!): DassetsCheckoutSession!
  dassetsCheckoutSessionUpdate(id: ObjectId!, data: IDassetsCheckoutSessionUpdate!): DassetsCheckoutSession!
  dassetsCheckoutSessionAttachStripePaymentIntent(id: ObjectId!): DassetsCheckoutSession!
}

input IUserSignUp {
  email: String!
  password: String!
}

"""Void type (example: true)"""
scalar Void

input IEventEmitterInstanceUpdate {
  is_webhook_emitter: Boolean
  webhook_endpoint: String
}

input IEventEmitterInstanceCreate {
  is_webhook_emitter: Boolean!
  webhook_endpoint: String
  syncer_instance: ObjectId!
}

input ISyncerInstanceCreate {
  project: ObjectId!
  preset: String
  contracts: [ISyncerInstanceCreateContracts!]
}

input ISyncerInstanceCreateContracts {
  address: Address
  deploy_tx: Keccak256
  contract_name: String!
  events: [String!]!
  abi: JSON!
}

input ISyncerInstanceUpdate {
  project: ObjectId
  preset: String
  contracts: [ISyncerInstanceUpdateContracts!]
}

input ISyncerInstanceUpdateContracts {
  address: Address
  deploy_tx: Keccak256
  contract_name: String
  events: [String!]
  abi: JSON
}

input IProjectCreate {
  name: String!
}

input IProjectUpdate {
  name: String
  dassets_settings: IProjectDassetsSettingsUpdate
}

input IProjectDassetsSettingsUpdate {
  include_networks: [Network!]
  token_base_url: String
  webhook_events_url: String
}

input IProjectGroupCreate {
  name: String!
  pic: String
  projects: [ObjectId!]
}

input IProjectGroupUpdate {
  name: String
  pic: String
  projects: [ObjectId!]
}

input IKeyBunchCreate {
  name: String!
  project: ObjectId!
}

input IDassetsCheckoutSessionCreate {
  project: ObjectId!
  asset_info: IDassetsCheckoutSessionCreateAssetInfo!
}

input IDassetsCheckoutSessionCreateAssetInfo {
  id: String!
  name: String!
  description: String
  image_url: String
}

input IDassetsCheckoutSessionUpdate {
  address: Address
  network: Network
}